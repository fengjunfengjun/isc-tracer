// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.14.0
// source: protobuf/pivot.proto

package pivot

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_pivot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_pivot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_protobuf_pivot_proto_rawDescGZIP(), []int{0}
}

func (x *Response) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StatisticInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passport       string              `protobuf:"bytes,1,opt,name=passport,proto3" json:"passport,omitempty"`
	ProfilesActive string              `protobuf:"bytes,2,opt,name=profilesActive,proto3" json:"profilesActive,omitempty"`
	Namespace      string              `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	AppName        string              `protobuf:"bytes,4,opt,name=appName,proto3" json:"appName,omitempty"`
	Ip             string              `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	MetricTxns     []*MetricTxnRequest `protobuf:"bytes,6,rep,name=metricTxns,proto3" json:"metricTxns,omitempty"`
	Timestamp      int64               `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *StatisticInfoRequest) Reset() {
	*x = StatisticInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_pivot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticInfoRequest) ProtoMessage() {}

func (x *StatisticInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_pivot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticInfoRequest.ProtoReflect.Descriptor instead.
func (*StatisticInfoRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_pivot_proto_rawDescGZIP(), []int{1}
}

func (x *StatisticInfoRequest) GetPassport() string {
	if x != nil {
		return x.Passport
	}
	return ""
}

func (x *StatisticInfoRequest) GetProfilesActive() string {
	if x != nil {
		return x.ProfilesActive
	}
	return ""
}

func (x *StatisticInfoRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StatisticInfoRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *StatisticInfoRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *StatisticInfoRequest) GetMetricTxns() []*MetricTxnRequest {
	if x != nil {
		return x.MetricTxns
	}
	return nil
}

func (x *StatisticInfoRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type MetricTxnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//AbstractBaseInfo
	Passport       string `protobuf:"bytes,1,opt,name=passport,proto3" json:"passport,omitempty"`
	ProfilesActive string `protobuf:"bytes,2,opt,name=profilesActive,proto3" json:"profilesActive,omitempty"`
	Namespace      string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	AppName        string `protobuf:"bytes,4,opt,name=appName,proto3" json:"appName,omitempty"`
	Ip             string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	ResourceName   string `protobuf:"bytes,6,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	RemoteAppName  string `protobuf:"bytes,7,opt,name=remoteAppName,proto3" json:"remoteAppName,omitempty"`
	RemoteIp       string `protobuf:"bytes,8,opt,name=remoteIp,proto3" json:"remoteIp,omitempty"`
	ResourceType   string `protobuf:"bytes,9,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	DataType       string `protobuf:"bytes,10,opt,name=dataType,proto3" json:"dataType,omitempty"`
	IsServer       bool   `protobuf:"varint,11,opt,name=isServer,proto3" json:"isServer,omitempty"`
	Perf           bool   `protobuf:"varint,12,opt,name=perf,proto3" json:"perf,omitempty"`
	Timestamp      int64  `protobuf:"varint,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CurrentMin     int64  `protobuf:"varint,14,opt,name=currentMin,proto3" json:"currentMin,omitempty"`
	//MetricTxn
	Success         int64                `protobuf:"varint,15,opt,name=success,proto3" json:"success,omitempty"`
	Exception       int64                `protobuf:"varint,16,opt,name=exception,proto3" json:"exception,omitempty"`
	Warn            int64                `protobuf:"varint,17,opt,name=warn,proto3" json:"warn,omitempty"`
	TotalRt         int64                `protobuf:"varint,18,opt,name=totalRt,proto3" json:"totalRt,omitempty"`
	GovernanceEvent int64                `protobuf:"varint,19,opt,name=governanceEvent,proto3" json:"governanceEvent,omitempty"`
	AvgRt           int64                `protobuf:"varint,20,opt,name=avgRt,proto3" json:"avgRt,omitempty"`
	MaxRt           int64                `protobuf:"varint,21,opt,name=maxRt,proto3" json:"maxRt,omitempty"`
	MinRt           int64                `protobuf:"varint,22,opt,name=minRt,proto3" json:"minRt,omitempty"`
	IntervalIndex   int32                `protobuf:"varint,23,opt,name=intervalIndex,proto3" json:"intervalIndex,omitempty"`
	RtIntervals     []*RtIntervalRequest `protobuf:"bytes,24,rep,name=rtIntervals,proto3" json:"rtIntervals,omitempty"`
	RtWave          *RtWaveRequest       `protobuf:"bytes,25,opt,name=rtWave,proto3" json:"rtWave,omitempty"`
}

func (x *MetricTxnRequest) Reset() {
	*x = MetricTxnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_pivot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricTxnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricTxnRequest) ProtoMessage() {}

func (x *MetricTxnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_pivot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricTxnRequest.ProtoReflect.Descriptor instead.
func (*MetricTxnRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_pivot_proto_rawDescGZIP(), []int{2}
}

func (x *MetricTxnRequest) GetPassport() string {
	if x != nil {
		return x.Passport
	}
	return ""
}

func (x *MetricTxnRequest) GetProfilesActive() string {
	if x != nil {
		return x.ProfilesActive
	}
	return ""
}

func (x *MetricTxnRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *MetricTxnRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *MetricTxnRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *MetricTxnRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *MetricTxnRequest) GetRemoteAppName() string {
	if x != nil {
		return x.RemoteAppName
	}
	return ""
}

func (x *MetricTxnRequest) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *MetricTxnRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *MetricTxnRequest) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *MetricTxnRequest) GetIsServer() bool {
	if x != nil {
		return x.IsServer
	}
	return false
}

func (x *MetricTxnRequest) GetPerf() bool {
	if x != nil {
		return x.Perf
	}
	return false
}

func (x *MetricTxnRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MetricTxnRequest) GetCurrentMin() int64 {
	if x != nil {
		return x.CurrentMin
	}
	return 0
}

func (x *MetricTxnRequest) GetSuccess() int64 {
	if x != nil {
		return x.Success
	}
	return 0
}

func (x *MetricTxnRequest) GetException() int64 {
	if x != nil {
		return x.Exception
	}
	return 0
}

func (x *MetricTxnRequest) GetWarn() int64 {
	if x != nil {
		return x.Warn
	}
	return 0
}

func (x *MetricTxnRequest) GetTotalRt() int64 {
	if x != nil {
		return x.TotalRt
	}
	return 0
}

func (x *MetricTxnRequest) GetGovernanceEvent() int64 {
	if x != nil {
		return x.GovernanceEvent
	}
	return 0
}

func (x *MetricTxnRequest) GetAvgRt() int64 {
	if x != nil {
		return x.AvgRt
	}
	return 0
}

func (x *MetricTxnRequest) GetMaxRt() int64 {
	if x != nil {
		return x.MaxRt
	}
	return 0
}

func (x *MetricTxnRequest) GetMinRt() int64 {
	if x != nil {
		return x.MinRt
	}
	return 0
}

func (x *MetricTxnRequest) GetIntervalIndex() int32 {
	if x != nil {
		return x.IntervalIndex
	}
	return 0
}

func (x *MetricTxnRequest) GetRtIntervals() []*RtIntervalRequest {
	if x != nil {
		return x.RtIntervals
	}
	return nil
}

func (x *MetricTxnRequest) GetRtWave() *RtWaveRequest {
	if x != nil {
		return x.RtWave
	}
	return nil
}

type RtWaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxRt     int64  `protobuf:"varint,1,opt,name=maxRt,proto3" json:"maxRt,omitempty"`
	MaxRtTime int64  `protobuf:"varint,2,opt,name=maxRtTime,proto3" json:"maxRtTime,omitempty"`
	TraceId   string `protobuf:"bytes,3,opt,name=traceId,proto3" json:"traceId,omitempty"`
}

func (x *RtWaveRequest) Reset() {
	*x = RtWaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_pivot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtWaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtWaveRequest) ProtoMessage() {}

func (x *RtWaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_pivot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtWaveRequest.ProtoReflect.Descriptor instead.
func (*RtWaveRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_pivot_proto_rawDescGZIP(), []int{3}
}

func (x *RtWaveRequest) GetMaxRt() int64 {
	if x != nil {
		return x.MaxRt
	}
	return 0
}

func (x *RtWaveRequest) GetMaxRtTime() int64 {
	if x != nil {
		return x.MaxRtTime
	}
	return 0
}

func (x *RtWaveRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type RtIntervalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinValue     int64  `protobuf:"varint,1,opt,name=minValue,proto3" json:"minValue,omitempty"`
	MaxValue     int64  `protobuf:"varint,2,opt,name=maxValue,proto3" json:"maxValue,omitempty"`
	IntervalName string `protobuf:"bytes,3,opt,name=intervalName,proto3" json:"intervalName,omitempty"`
	RtCounter    int64  `protobuf:"varint,4,opt,name=rtCounter,proto3" json:"rtCounter,omitempty"`
}

func (x *RtIntervalRequest) Reset() {
	*x = RtIntervalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_pivot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtIntervalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtIntervalRequest) ProtoMessage() {}

func (x *RtIntervalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_pivot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtIntervalRequest.ProtoReflect.Descriptor instead.
func (*RtIntervalRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_pivot_proto_rawDescGZIP(), []int{4}
}

func (x *RtIntervalRequest) GetMinValue() int64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *RtIntervalRequest) GetMaxValue() int64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *RtIntervalRequest) GetIntervalName() string {
	if x != nil {
		return x.IntervalName
	}
	return ""
}

func (x *RtIntervalRequest) GetRtCounter() int64 {
	if x != nil {
		return x.RtCounter
	}
	return 0
}

type ExceptionEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//AbstractBaseInfo
	Passport       string `protobuf:"bytes,1,opt,name=passport,proto3" json:"passport,omitempty"`
	ProfilesActive string `protobuf:"bytes,2,opt,name=profilesActive,proto3" json:"profilesActive,omitempty"`
	Namespace      string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	AppName        string `protobuf:"bytes,4,opt,name=appName,proto3" json:"appName,omitempty"`
	Ip             string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	ResourceName   string `protobuf:"bytes,6,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	RemoteAppName  string `protobuf:"bytes,7,opt,name=remoteAppName,proto3" json:"remoteAppName,omitempty"`
	RemoteIp       string `protobuf:"bytes,8,opt,name=remoteIp,proto3" json:"remoteIp,omitempty"`
	ResourceType   string `protobuf:"bytes,9,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	DataType       string `protobuf:"bytes,10,opt,name=dataType,proto3" json:"dataType,omitempty"`
	IsServer       bool   `protobuf:"varint,11,opt,name=isServer,proto3" json:"isServer,omitempty"`
	Perf           bool   `protobuf:"varint,12,opt,name=perf,proto3" json:"perf,omitempty"`
	Timestamp      int64  `protobuf:"varint,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CurrentMin     int64  `protobuf:"varint,14,opt,name=currentMin,proto3" json:"currentMin,omitempty"`
	// AbstractEvent
	Code       string            `protobuf:"bytes,15,opt,name=code,proto3" json:"code,omitempty"`
	TraceId    string            `protobuf:"bytes,16,opt,name=traceId,proto3" json:"traceId,omitempty"`
	EventType  string            `protobuf:"bytes,17,opt,name=eventType,proto3" json:"eventType,omitempty"`
	EventLevel string            `protobuf:"bytes,18,opt,name=eventLevel,proto3" json:"eventLevel,omitempty"`
	AttrMap    map[string]string `protobuf:"bytes,19,rep,name=attrMap,proto3" json:"attrMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Merge      int32             `protobuf:"varint,20,opt,name=merge,proto3" json:"merge,omitempty"`
	//ExceptionEvent
	ExceptionMsg string `protobuf:"bytes,21,opt,name=exceptionMsg,proto3" json:"exceptionMsg,omitempty"`
	Rt           int64  `protobuf:"varint,22,opt,name=rt,proto3" json:"rt,omitempty"`
	Context      string `protobuf:"bytes,23,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ExceptionEventRequest) Reset() {
	*x = ExceptionEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_pivot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExceptionEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExceptionEventRequest) ProtoMessage() {}

func (x *ExceptionEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_pivot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExceptionEventRequest.ProtoReflect.Descriptor instead.
func (*ExceptionEventRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_pivot_proto_rawDescGZIP(), []int{5}
}

func (x *ExceptionEventRequest) GetPassport() string {
	if x != nil {
		return x.Passport
	}
	return ""
}

func (x *ExceptionEventRequest) GetProfilesActive() string {
	if x != nil {
		return x.ProfilesActive
	}
	return ""
}

func (x *ExceptionEventRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ExceptionEventRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *ExceptionEventRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ExceptionEventRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ExceptionEventRequest) GetRemoteAppName() string {
	if x != nil {
		return x.RemoteAppName
	}
	return ""
}

func (x *ExceptionEventRequest) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *ExceptionEventRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ExceptionEventRequest) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *ExceptionEventRequest) GetIsServer() bool {
	if x != nil {
		return x.IsServer
	}
	return false
}

func (x *ExceptionEventRequest) GetPerf() bool {
	if x != nil {
		return x.Perf
	}
	return false
}

func (x *ExceptionEventRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExceptionEventRequest) GetCurrentMin() int64 {
	if x != nil {
		return x.CurrentMin
	}
	return 0
}

func (x *ExceptionEventRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ExceptionEventRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *ExceptionEventRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *ExceptionEventRequest) GetEventLevel() string {
	if x != nil {
		return x.EventLevel
	}
	return ""
}

func (x *ExceptionEventRequest) GetAttrMap() map[string]string {
	if x != nil {
		return x.AttrMap
	}
	return nil
}

func (x *ExceptionEventRequest) GetMerge() int32 {
	if x != nil {
		return x.Merge
	}
	return 0
}

func (x *ExceptionEventRequest) GetExceptionMsg() string {
	if x != nil {
		return x.ExceptionMsg
	}
	return ""
}

func (x *ExceptionEventRequest) GetRt() int64 {
	if x != nil {
		return x.Rt
	}
	return 0
}

func (x *ExceptionEventRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type WarnEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//AbstractBaseInfo
	Passport       string `protobuf:"bytes,1,opt,name=passport,proto3" json:"passport,omitempty"`
	ProfilesActive string `protobuf:"bytes,2,opt,name=profilesActive,proto3" json:"profilesActive,omitempty"`
	Namespace      string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	AppName        string `protobuf:"bytes,4,opt,name=appName,proto3" json:"appName,omitempty"`
	Ip             string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	ResourceName   string `protobuf:"bytes,6,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	RemoteAppName  string `protobuf:"bytes,7,opt,name=remoteAppName,proto3" json:"remoteAppName,omitempty"`
	RemoteIp       string `protobuf:"bytes,8,opt,name=remoteIp,proto3" json:"remoteIp,omitempty"`
	ResourceType   string `protobuf:"bytes,9,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	DataType       string `protobuf:"bytes,10,opt,name=dataType,proto3" json:"dataType,omitempty"`
	IsServer       bool   `protobuf:"varint,11,opt,name=isServer,proto3" json:"isServer,omitempty"`
	Perf           bool   `protobuf:"varint,12,opt,name=perf,proto3" json:"perf,omitempty"`
	Timestamp      int64  `protobuf:"varint,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CurrentMin     int64  `protobuf:"varint,14,opt,name=currentMin,proto3" json:"currentMin,omitempty"`
	// AbstractEvent
	Code       string            `protobuf:"bytes,15,opt,name=code,proto3" json:"code,omitempty"`
	TraceId    string            `protobuf:"bytes,16,opt,name=traceId,proto3" json:"traceId,omitempty"`
	EventType  string            `protobuf:"bytes,17,opt,name=eventType,proto3" json:"eventType,omitempty"`
	EventLevel string            `protobuf:"bytes,18,opt,name=eventLevel,proto3" json:"eventLevel,omitempty"`
	AttrMap    map[string]string `protobuf:"bytes,19,rep,name=attrMap,proto3" json:"attrMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Merge      int32             `protobuf:"varint,20,opt,name=merge,proto3" json:"merge,omitempty"`
	//WarnEvent
	WarnMsg string `protobuf:"bytes,21,opt,name=warnMsg,proto3" json:"warnMsg,omitempty"`
	Rt      int64  `protobuf:"varint,22,opt,name=rt,proto3" json:"rt,omitempty"`
	Context string `protobuf:"bytes,23,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *WarnEventRequest) Reset() {
	*x = WarnEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_pivot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarnEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarnEventRequest) ProtoMessage() {}

func (x *WarnEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_pivot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarnEventRequest.ProtoReflect.Descriptor instead.
func (*WarnEventRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_pivot_proto_rawDescGZIP(), []int{6}
}

func (x *WarnEventRequest) GetPassport() string {
	if x != nil {
		return x.Passport
	}
	return ""
}

func (x *WarnEventRequest) GetProfilesActive() string {
	if x != nil {
		return x.ProfilesActive
	}
	return ""
}

func (x *WarnEventRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WarnEventRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *WarnEventRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *WarnEventRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *WarnEventRequest) GetRemoteAppName() string {
	if x != nil {
		return x.RemoteAppName
	}
	return ""
}

func (x *WarnEventRequest) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *WarnEventRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *WarnEventRequest) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *WarnEventRequest) GetIsServer() bool {
	if x != nil {
		return x.IsServer
	}
	return false
}

func (x *WarnEventRequest) GetPerf() bool {
	if x != nil {
		return x.Perf
	}
	return false
}

func (x *WarnEventRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WarnEventRequest) GetCurrentMin() int64 {
	if x != nil {
		return x.CurrentMin
	}
	return 0
}

func (x *WarnEventRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WarnEventRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *WarnEventRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *WarnEventRequest) GetEventLevel() string {
	if x != nil {
		return x.EventLevel
	}
	return ""
}

func (x *WarnEventRequest) GetAttrMap() map[string]string {
	if x != nil {
		return x.AttrMap
	}
	return nil
}

func (x *WarnEventRequest) GetMerge() int32 {
	if x != nil {
		return x.Merge
	}
	return 0
}

func (x *WarnEventRequest) GetWarnMsg() string {
	if x != nil {
		return x.WarnMsg
	}
	return ""
}

func (x *WarnEventRequest) GetRt() int64 {
	if x != nil {
		return x.Rt
	}
	return 0
}

func (x *WarnEventRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type DefaultEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//AbstractBaseInfo
	Passport       string `protobuf:"bytes,1,opt,name=passport,proto3" json:"passport,omitempty"`
	ProfilesActive string `protobuf:"bytes,2,opt,name=profilesActive,proto3" json:"profilesActive,omitempty"`
	Namespace      string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	AppName        string `protobuf:"bytes,4,opt,name=appName,proto3" json:"appName,omitempty"`
	Ip             string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	ResourceName   string `protobuf:"bytes,6,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	RemoteAppName  string `protobuf:"bytes,7,opt,name=remoteAppName,proto3" json:"remoteAppName,omitempty"`
	RemoteIp       string `protobuf:"bytes,8,opt,name=remoteIp,proto3" json:"remoteIp,omitempty"`
	ResourceType   string `protobuf:"bytes,9,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	DataType       string `protobuf:"bytes,10,opt,name=dataType,proto3" json:"dataType,omitempty"`
	IsServer       bool   `protobuf:"varint,11,opt,name=isServer,proto3" json:"isServer,omitempty"`
	Perf           bool   `protobuf:"varint,12,opt,name=perf,proto3" json:"perf,omitempty"`
	Timestamp      int64  `protobuf:"varint,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CurrentMin     int64  `protobuf:"varint,14,opt,name=currentMin,proto3" json:"currentMin,omitempty"`
	// AbstractEvent
	Code       string            `protobuf:"bytes,15,opt,name=code,proto3" json:"code,omitempty"`
	TraceId    string            `protobuf:"bytes,16,opt,name=traceId,proto3" json:"traceId,omitempty"`
	EventType  string            `protobuf:"bytes,17,opt,name=eventType,proto3" json:"eventType,omitempty"`
	EventLevel string            `protobuf:"bytes,18,opt,name=eventLevel,proto3" json:"eventLevel,omitempty"`
	AttrMap    map[string]string `protobuf:"bytes,19,rep,name=attrMap,proto3" json:"attrMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Merge      int32             `protobuf:"varint,20,opt,name=merge,proto3" json:"merge,omitempty"`
	//DefaultEvent
	Message string `protobuf:"bytes,21,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DefaultEventRequest) Reset() {
	*x = DefaultEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_pivot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultEventRequest) ProtoMessage() {}

func (x *DefaultEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_pivot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultEventRequest.ProtoReflect.Descriptor instead.
func (*DefaultEventRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_pivot_proto_rawDescGZIP(), []int{7}
}

func (x *DefaultEventRequest) GetPassport() string {
	if x != nil {
		return x.Passport
	}
	return ""
}

func (x *DefaultEventRequest) GetProfilesActive() string {
	if x != nil {
		return x.ProfilesActive
	}
	return ""
}

func (x *DefaultEventRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DefaultEventRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *DefaultEventRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DefaultEventRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *DefaultEventRequest) GetRemoteAppName() string {
	if x != nil {
		return x.RemoteAppName
	}
	return ""
}

func (x *DefaultEventRequest) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *DefaultEventRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *DefaultEventRequest) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *DefaultEventRequest) GetIsServer() bool {
	if x != nil {
		return x.IsServer
	}
	return false
}

func (x *DefaultEventRequest) GetPerf() bool {
	if x != nil {
		return x.Perf
	}
	return false
}

func (x *DefaultEventRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DefaultEventRequest) GetCurrentMin() int64 {
	if x != nil {
		return x.CurrentMin
	}
	return 0
}

func (x *DefaultEventRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DefaultEventRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *DefaultEventRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *DefaultEventRequest) GetEventLevel() string {
	if x != nil {
		return x.EventLevel
	}
	return ""
}

func (x *DefaultEventRequest) GetAttrMap() map[string]string {
	if x != nil {
		return x.AttrMap
	}
	return nil
}

func (x *DefaultEventRequest) GetMerge() int32 {
	if x != nil {
		return x.Merge
	}
	return 0
}

func (x *DefaultEventRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TraceLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//AbstractBaseInfo
	TraceId string `protobuf:"bytes,1,opt,name=traceId,proto3" json:"traceId,omitempty"`
	RpcId   string `protobuf:"bytes,2,opt,name=rpcId,proto3" json:"rpcId,omitempty"`
	// 跟踪类型,参考枚举类含义
	TraceType int32 `protobuf:"varint,3,opt,name=traceType,proto3" json:"traceType,omitempty"`
	//名称
	TraceName string `protobuf:"bytes,4,opt,name=traceName,proto3" json:"traceName,omitempty"`
	// 端信息
	Endpoint int32 `protobuf:"varint,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// 跟踪结果
	Status int32 `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	// remote返回结果
	RemoteStatus int32 `protobuf:"varint,7,opt,name=remoteStatus,proto3" json:"remoteStatus,omitempty"`
	// 下游(Client)或上游(Server)ip
	RemoteIp string `protobuf:"bytes,8,opt,name=remoteIp,proto3" json:"remoteIp,omitempty"`
	// 结果附属信息
	Message string `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	// 响应大小
	Size int32 `protobuf:"varint,10,opt,name=size,proto3" json:"size,omitempty"`
	// 开始时间
	StartTime int64 `protobuf:"varint,11,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// 结束时间
	EndTime int64 `protobuf:"varint,12,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Sampled bool  `protobuf:"varint,13,opt,name=sampled,proto3" json:"sampled,omitempty"`
	// 业务通过 PivotTrace.record的自定义数据
	BizData map[string][]byte `protobuf:"bytes,14,rep,name=bizData,proto3" json:"bizData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 是否已经结束
	Ended bool `protobuf:"varint,15,opt,name=ended,proto3" json:"ended,omitempty"`
	// 贯穿整个trace链路的信息集合, 内部使用
	AttrMap map[string]string `protobuf:"bytes,16,rep,name=attrMap,proto3" json:"attrMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 用于临时储存，不可存放大数据(带货)
	ContextMap map[string][]byte `protobuf:"bytes,17,rep,name=contextMap,proto3" json:"contextMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 线程的切换方式
	ThreadMode     int32  `protobuf:"varint,18,opt,name=threadMode,proto3" json:"threadMode,omitempty"`
	ProfilesActive string `protobuf:"bytes,19,opt,name=profilesActive,proto3" json:"profilesActive,omitempty"`
	AppName        string `protobuf:"bytes,20,opt,name=appName,proto3" json:"appName,omitempty"`
	Ip             string `protobuf:"bytes,21,opt,name=ip,proto3" json:"ip,omitempty"`
	UserId         string `protobuf:"bytes,22,opt,name=userId,proto3" json:"userId,omitempty"`
	//* tracer.endTime - tracer.startTime
	Rt int32 `protobuf:"varint,23,opt,name=rt,proto3" json:"rt,omitempty"`
	//*
	// type为mysql时, 为sql
	// type为redis时, 为执行的命令
	//
	Sql string `protobuf:"bytes,24,opt,name=sql,proto3" json:"sql,omitempty"`
}

func (x *TraceLogRequest) Reset() {
	*x = TraceLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_pivot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceLogRequest) ProtoMessage() {}

func (x *TraceLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_pivot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceLogRequest.ProtoReflect.Descriptor instead.
func (*TraceLogRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_pivot_proto_rawDescGZIP(), []int{8}
}

func (x *TraceLogRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *TraceLogRequest) GetRpcId() string {
	if x != nil {
		return x.RpcId
	}
	return ""
}

func (x *TraceLogRequest) GetTraceType() int32 {
	if x != nil {
		return x.TraceType
	}
	return 0
}

func (x *TraceLogRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

func (x *TraceLogRequest) GetEndpoint() int32 {
	if x != nil {
		return x.Endpoint
	}
	return 0
}

func (x *TraceLogRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TraceLogRequest) GetRemoteStatus() int32 {
	if x != nil {
		return x.RemoteStatus
	}
	return 0
}

func (x *TraceLogRequest) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *TraceLogRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TraceLogRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TraceLogRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TraceLogRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TraceLogRequest) GetSampled() bool {
	if x != nil {
		return x.Sampled
	}
	return false
}

func (x *TraceLogRequest) GetBizData() map[string][]byte {
	if x != nil {
		return x.BizData
	}
	return nil
}

func (x *TraceLogRequest) GetEnded() bool {
	if x != nil {
		return x.Ended
	}
	return false
}

func (x *TraceLogRequest) GetAttrMap() map[string]string {
	if x != nil {
		return x.AttrMap
	}
	return nil
}

func (x *TraceLogRequest) GetContextMap() map[string][]byte {
	if x != nil {
		return x.ContextMap
	}
	return nil
}

func (x *TraceLogRequest) GetThreadMode() int32 {
	if x != nil {
		return x.ThreadMode
	}
	return 0
}

func (x *TraceLogRequest) GetProfilesActive() string {
	if x != nil {
		return x.ProfilesActive
	}
	return ""
}

func (x *TraceLogRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *TraceLogRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *TraceLogRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TraceLogRequest) GetRt() int32 {
	if x != nil {
		return x.Rt
	}
	return 0
}

func (x *TraceLogRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

type AuditLogInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName    string   `protobuf:"bytes,1,opt,name=appName,proto3" json:"appName,omitempty"`
	LogName    string   `protobuf:"bytes,2,opt,name=logName,proto3" json:"logName,omitempty"`
	LogMsgList []string `protobuf:"bytes,3,rep,name=logMsgList,proto3" json:"logMsgList,omitempty"`
}

func (x *AuditLogInfoRequest) Reset() {
	*x = AuditLogInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_pivot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogInfoRequest) ProtoMessage() {}

func (x *AuditLogInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_pivot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogInfoRequest.ProtoReflect.Descriptor instead.
func (*AuditLogInfoRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_pivot_proto_rawDescGZIP(), []int{9}
}

func (x *AuditLogInfoRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *AuditLogInfoRequest) GetLogName() string {
	if x != nil {
		return x.LogName
	}
	return ""
}

func (x *AuditLogInfoRequest) GetLogMsgList() []string {
	if x != nil {
		return x.LogMsgList
	}
	return nil
}

var File_protobuf_pivot_proto protoreflect.FileDescriptor

var file_protobuf_pivot_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x69, 0x76, 0x6f, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x67, 0x72, 0x70, 0x63, 0x22, 0x38, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x78, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x78, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54,
	0x78, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x92, 0x06, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x78, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x66, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x70, 0x65, 0x72, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x77, 0x61,
	0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x76, 0x67, 0x52, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x76, 0x67, 0x52, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x61, 0x78, 0x52, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x78,
	0x52, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x52, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x52, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39,
	0x0a, 0x0b, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x72, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x74, 0x57,
	0x61, 0x76, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x74, 0x57, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06,
	0x72, 0x74, 0x57, 0x61, 0x76, 0x65, 0x22, 0x5d, 0x0a, 0x0d, 0x52, 0x74, 0x57, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x52, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x52, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x52, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x52, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x52, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x87, 0x06, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x70, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x65, 0x72, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x65, 0x72,
	0x66, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf3, 0x05, 0x0a, 0x10, 0x57, 0x61, 0x72, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x70, 0x65, 0x72, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x3d, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x4d, 0x73, 0x67,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x4d, 0x73, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x72, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x74, 0x74,
	0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcf, 0x05, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x65, 0x72, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x65, 0x72, 0x66, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x4d, 0x61, 0x70, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x41,
	0x74, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x07, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x70, 0x63, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x70, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x62,
	0x69, 0x7a, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x7a, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x62, 0x69, 0x7a, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x45, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x4d, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c,
	0x1a, 0x3a, 0x0a, 0x0c, 0x42, 0x69, 0x7a, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c,
	0x41, 0x74, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x32, 0x83, 0x03, 0x0a, 0x0c, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x16, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x19, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x2f, 0x70, 0x69, 0x76,
	0x6f, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_pivot_proto_rawDescOnce sync.Once
	file_protobuf_pivot_proto_rawDescData = file_protobuf_pivot_proto_rawDesc
)

func file_protobuf_pivot_proto_rawDescGZIP() []byte {
	file_protobuf_pivot_proto_rawDescOnce.Do(func() {
		file_protobuf_pivot_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_pivot_proto_rawDescData)
	})
	return file_protobuf_pivot_proto_rawDescData
}

var file_protobuf_pivot_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_protobuf_pivot_proto_goTypes = []interface{}{
	(*Response)(nil),              // 0: grpc.Response
	(*StatisticInfoRequest)(nil),  // 1: grpc.StatisticInfoRequest
	(*MetricTxnRequest)(nil),      // 2: grpc.MetricTxnRequest
	(*RtWaveRequest)(nil),         // 3: grpc.RtWaveRequest
	(*RtIntervalRequest)(nil),     // 4: grpc.RtIntervalRequest
	(*ExceptionEventRequest)(nil), // 5: grpc.ExceptionEventRequest
	(*WarnEventRequest)(nil),      // 6: grpc.WarnEventRequest
	(*DefaultEventRequest)(nil),   // 7: grpc.DefaultEventRequest
	(*TraceLogRequest)(nil),       // 8: grpc.TraceLogRequest
	(*AuditLogInfoRequest)(nil),   // 9: grpc.AuditLogInfoRequest
	nil,                           // 10: grpc.ExceptionEventRequest.AttrMapEntry
	nil,                           // 11: grpc.WarnEventRequest.AttrMapEntry
	nil,                           // 12: grpc.DefaultEventRequest.AttrMapEntry
	nil,                           // 13: grpc.TraceLogRequest.BizDataEntry
	nil,                           // 14: grpc.TraceLogRequest.AttrMapEntry
	nil,                           // 15: grpc.TraceLogRequest.ContextMapEntry
}
var file_protobuf_pivot_proto_depIdxs = []int32{
	2,  // 0: grpc.StatisticInfoRequest.metricTxns:type_name -> grpc.MetricTxnRequest
	4,  // 1: grpc.MetricTxnRequest.rtIntervals:type_name -> grpc.RtIntervalRequest
	3,  // 2: grpc.MetricTxnRequest.rtWave:type_name -> grpc.RtWaveRequest
	10, // 3: grpc.ExceptionEventRequest.attrMap:type_name -> grpc.ExceptionEventRequest.AttrMapEntry
	11, // 4: grpc.WarnEventRequest.attrMap:type_name -> grpc.WarnEventRequest.AttrMapEntry
	12, // 5: grpc.DefaultEventRequest.attrMap:type_name -> grpc.DefaultEventRequest.AttrMapEntry
	13, // 6: grpc.TraceLogRequest.bizData:type_name -> grpc.TraceLogRequest.BizDataEntry
	14, // 7: grpc.TraceLogRequest.attrMap:type_name -> grpc.TraceLogRequest.AttrMapEntry
	15, // 8: grpc.TraceLogRequest.contextMap:type_name -> grpc.TraceLogRequest.ContextMapEntry
	1,  // 9: grpc.PivotService.collectStatisticsInfo:input_type -> grpc.StatisticInfoRequest
	5,  // 10: grpc.PivotService.collectException:input_type -> grpc.ExceptionEventRequest
	6,  // 11: grpc.PivotService.collectWarn:input_type -> grpc.WarnEventRequest
	7,  // 12: grpc.PivotService.collectEvent:input_type -> grpc.DefaultEventRequest
	8,  // 13: grpc.PivotService.collectTracer:input_type -> grpc.TraceLogRequest
	9,  // 14: grpc.PivotService.collectLog:input_type -> grpc.AuditLogInfoRequest
	0,  // 15: grpc.PivotService.collectStatisticsInfo:output_type -> grpc.Response
	0,  // 16: grpc.PivotService.collectException:output_type -> grpc.Response
	0,  // 17: grpc.PivotService.collectWarn:output_type -> grpc.Response
	0,  // 18: grpc.PivotService.collectEvent:output_type -> grpc.Response
	0,  // 19: grpc.PivotService.collectTracer:output_type -> grpc.Response
	0,  // 20: grpc.PivotService.collectLog:output_type -> grpc.Response
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_protobuf_pivot_proto_init() }
func file_protobuf_pivot_proto_init() {
	if File_protobuf_pivot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_pivot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_pivot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_pivot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricTxnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_pivot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtWaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_pivot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtIntervalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_pivot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExceptionEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_pivot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarnEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_pivot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_pivot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_pivot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_pivot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_pivot_proto_goTypes,
		DependencyIndexes: file_protobuf_pivot_proto_depIdxs,
		MessageInfos:      file_protobuf_pivot_proto_msgTypes,
	}.Build()
	File_protobuf_pivot_proto = out.File
	file_protobuf_pivot_proto_rawDesc = nil
	file_protobuf_pivot_proto_goTypes = nil
	file_protobuf_pivot_proto_depIdxs = nil
}
