// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: protobuf/pivot.proto

package pivot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PivotServiceClient is the client API for PivotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PivotServiceClient interface {
	CollectStatisticsInfo(ctx context.Context, in *StatisticInfoRequest, opts ...grpc.CallOption) (*Response, error)
	CollectException(ctx context.Context, in *ExceptionEventRequest, opts ...grpc.CallOption) (*Response, error)
	CollectWarn(ctx context.Context, in *WarnEventRequest, opts ...grpc.CallOption) (*Response, error)
	CollectEvent(ctx context.Context, in *DefaultEventRequest, opts ...grpc.CallOption) (*Response, error)
	CollectTracer(ctx context.Context, in *TraceLogRequest, opts ...grpc.CallOption) (*Response, error)
	CollectLog(ctx context.Context, in *AuditLogInfoRequest, opts ...grpc.CallOption) (*Response, error)
}

type pivotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPivotServiceClient(cc grpc.ClientConnInterface) PivotServiceClient {
	return &pivotServiceClient{cc}
}

func (c *pivotServiceClient) CollectStatisticsInfo(ctx context.Context, in *StatisticInfoRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.PivotService/collectStatisticsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotServiceClient) CollectException(ctx context.Context, in *ExceptionEventRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.PivotService/collectException", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotServiceClient) CollectWarn(ctx context.Context, in *WarnEventRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.PivotService/collectWarn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotServiceClient) CollectEvent(ctx context.Context, in *DefaultEventRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.PivotService/collectEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotServiceClient) CollectTracer(ctx context.Context, in *TraceLogRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.PivotService/collectTracer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pivotServiceClient) CollectLog(ctx context.Context, in *AuditLogInfoRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.PivotService/collectLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PivotServiceServer is the server API for PivotService service.
// All implementations must embed UnimplementedPivotServiceServer
// for forward compatibility
type PivotServiceServer interface {
	CollectStatisticsInfo(context.Context, *StatisticInfoRequest) (*Response, error)
	CollectException(context.Context, *ExceptionEventRequest) (*Response, error)
	CollectWarn(context.Context, *WarnEventRequest) (*Response, error)
	CollectEvent(context.Context, *DefaultEventRequest) (*Response, error)
	CollectTracer(context.Context, *TraceLogRequest) (*Response, error)
	CollectLog(context.Context, *AuditLogInfoRequest) (*Response, error)
	mustEmbedUnimplementedPivotServiceServer()
}

// UnimplementedPivotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPivotServiceServer struct {
}

func (UnimplementedPivotServiceServer) CollectStatisticsInfo(context.Context, *StatisticInfoRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectStatisticsInfo not implemented")
}
func (UnimplementedPivotServiceServer) CollectException(context.Context, *ExceptionEventRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectException not implemented")
}
func (UnimplementedPivotServiceServer) CollectWarn(context.Context, *WarnEventRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectWarn not implemented")
}
func (UnimplementedPivotServiceServer) CollectEvent(context.Context, *DefaultEventRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectEvent not implemented")
}
func (UnimplementedPivotServiceServer) CollectTracer(context.Context, *TraceLogRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectTracer not implemented")
}
func (UnimplementedPivotServiceServer) CollectLog(context.Context, *AuditLogInfoRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectLog not implemented")
}
func (UnimplementedPivotServiceServer) mustEmbedUnimplementedPivotServiceServer() {}

// UnsafePivotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PivotServiceServer will
// result in compilation errors.
type UnsafePivotServiceServer interface {
	mustEmbedUnimplementedPivotServiceServer()
}

func RegisterPivotServiceServer(s grpc.ServiceRegistrar, srv PivotServiceServer) {
	s.RegisterService(&PivotService_ServiceDesc, srv)
}

func _PivotService_CollectStatisticsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotServiceServer).CollectStatisticsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PivotService/collectStatisticsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotServiceServer).CollectStatisticsInfo(ctx, req.(*StatisticInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotService_CollectException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExceptionEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotServiceServer).CollectException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PivotService/collectException",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotServiceServer).CollectException(ctx, req.(*ExceptionEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotService_CollectWarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarnEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotServiceServer).CollectWarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PivotService/collectWarn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotServiceServer).CollectWarn(ctx, req.(*WarnEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotService_CollectEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotServiceServer).CollectEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PivotService/collectEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotServiceServer).CollectEvent(ctx, req.(*DefaultEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotService_CollectTracer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraceLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotServiceServer).CollectTracer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PivotService/collectTracer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotServiceServer).CollectTracer(ctx, req.(*TraceLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PivotService_CollectLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditLogInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PivotServiceServer).CollectLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PivotService/collectLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PivotServiceServer).CollectLog(ctx, req.(*AuditLogInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PivotService_ServiceDesc is the grpc.ServiceDesc for PivotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PivotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.PivotService",
	HandlerType: (*PivotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "collectStatisticsInfo",
			Handler:    _PivotService_CollectStatisticsInfo_Handler,
		},
		{
			MethodName: "collectException",
			Handler:    _PivotService_CollectException_Handler,
		},
		{
			MethodName: "collectWarn",
			Handler:    _PivotService_CollectWarn_Handler,
		},
		{
			MethodName: "collectEvent",
			Handler:    _PivotService_CollectEvent_Handler,
		},
		{
			MethodName: "collectTracer",
			Handler:    _PivotService_CollectTracer_Handler,
		},
		{
			MethodName: "collectLog",
			Handler:    _PivotService_CollectLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/pivot.proto",
}
